# no need to put enviroment variables holders like MYSQL_HOST because all application.properties values can be passed in to container using docker compose, this is possible because enviroemnt variables takes precedence over application.properties so it will overwrite what ever is written here
# in other words what is written here is for local development only, this cannot be said for POM.XML where I need to put a holder for enviroment variable like what I did with JOOQ using env.MYSQL_URL
# for more info check this post https://stackoverflow.com/questions/46057625/externalising-spring-boot-properties-when-deploying-to-docker
# an alternative way for running the app is fixing JOOQ url as jdbc:mysql://localhost:3306/wv creating a temp docker cotainer for mysSql DB and exposing 3306:3306 then building the JAR file then run my own docker compose
spring.datasource.url=jdbc:mysql://localhost:3307/wv?allowMultiQueries=true&createDatabaseIfNotExist=true

# spring.datasource.url=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/wv?allowMultiQueries=true&createDatabaseIfNotExist=true
#spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQLPORT:3306}/wv?allowMultiQueries=true&createDatabaseIfNotExist=true

#allowMultiQueries=true is added to allow executing multiple queries at once, it is disabled by default because
#it expose security risk for SQL injection, this risk is not present when using JOOQ, plus JOOQ needs 
#this to execute groupConcat(). for more Info read https://blog.jooq.org/mysqls-allowmultiqueries-flag-with-jdbc-and-jooq/

spring.datasource.username=root
spring.datasource.password=root

logging.level.org.springframework=info
logging.level.org.springframework.jdbc=DEBUG
#logging.level.com.wv=INFO
#logging.level.com.zaxxer=DEBUG
#logging.level.root=ERROR
logging.level.org.jooq=DEBUG
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5

logging.pattern.console=%-5level %logger{36} - %msg%n
