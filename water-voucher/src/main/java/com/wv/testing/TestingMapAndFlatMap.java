package com.wv.testing;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import test.UserTest;

public class TestingMapAndFlatMap {
	/*************************************
	7777777 LAZY EVALUATION of streams is very important topic, read this article: https://stackify.com/streams-guide-java-8/
	*************************************
	*/

	public static void main(String[] args) {
//		ArrayList<String> fruit = new ArrayList<>();
//        fruit.add("Apple");
//        fruit.add("mango");
//        fruit.add("pineapple");
//        fruit.add("kiwi");
//        
//        List list = fruit.stream()
//                .map(s -> s.length())
//                .collect(Collectors.toList());
//        System.out.println("List generated by map-" + list);
//        
        //----------------------------------------------------------------
        
        List<List<Integer> > number = new ArrayList<>();
        
        number.add(Arrays.asList(1, 2));
        number.add(Arrays.asList(3, 4));
        number.add(Arrays.asList(5, 6));
        number.add(Arrays.asList(7, 8));
       
        System.out.println("List of list-" + number);
       
        // using flatmap() to flatten this list
        List<Integer> flatList
            = number.stream()
            		.flatMap(List<Integer>::stream)//the same as flatMap(lst -> lst.stream())
                  //.flatMap(lst -> lst.stream()) //convert all List<Integer> to streams than merge them on one stream using flatMap
//                  .toList();
                  .collect(Collectors.toList()); //this is the same as  .toList();
       
        // printing the list
        System.out.println("List generate by flatMap-" + flatList);
        
        Stream.of(Stream.of("mahmoud", "yasine"), Stream.of("mama", "zin5a"))
        .flatMap(n->n)// merge streams in one stream
        .toList()
        .forEach(System.out::println);
//        .collect(Collectors.toList()); //this is the same as  .toList();
//        System.out.println(listStr);
	}
	
	/*************************************
	 * getEmployeesByIds() is useful application of streams
	 * i should use it in waterVoucher
	 */
//	public void getEmployeesByIds() {
//	    Integer[] userIds = { 1, 2, 3 };
//	    
//	    List<UserTest> userTest = Stream.of(userIds)
//	      .map(userRepository::findById)
//	      .collect(Collectors.toList());
//	    
//	}
}
