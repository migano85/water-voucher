version: "3.8"
services:
   db:
      # service 1 create database
      image: mysql
      container_name: mysqlDB
      restart: unless-stopped
      networks:    #if we omit network then both of them will be inside the same network because we created both container using one compose file, but if we created them using CMD then we have to associate them to the smae network manually 
         - myNetwork
      environment: #environment can be a list as bellow in water-voucher or as a key:value like here
         MYSQL_ROOT_PASSWORD: root
         MYSQL_DATABASE: wv

      ports:
         - "3307:3306"
      volumes:
         - D:/docker-mysql-data:/var/lib/mysql
      
   water-voucher:
      #service 2 run docker file of water voucher
      image: migano/water-voucher-image
      container_name: water-voucher-app
      #build:
         #dockerfile: Dockerfile
      networks:
         - myNetwork
      environment: #environment can be key:value as above in db or as a list like here
         - SPRING_DATASOURCE_URL=jdbc:mysql://mysqlDB:3306/wv?allowMultiQueries=true&createDatabaseIfNotExist=true
         - SPRING_DATASOURCE_USERNAME=root
         - SPRING_DATASOURCE_PASSWORD=root
         #- MYSQL_PORT=3306 #3307 is exposed of external connection, but as wv app and mySQlDB reside in the same network inside docker i will connect to DB using the default 3306
         - MYSQL_URL=jdbc:mysql://mysqlDB:3306/wv  #inside docker mysql port is 3306 not 3307
      ports:
         - "8081:8080"
      depends_on:
         - db

networks: #if the network tag is omitted in both water-voucher-app and mysqlDB containers, then this network will not be created and they will be assigned to a default netwrok of them, and they connect to each other, but as a good practice it's better to create the network and name it yourself, better then getting an arbitrary network created when executing docker-compose up -d
         myNetwork:
            name: water-voucher-net
            driver: bridge